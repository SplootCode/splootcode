
category: Python
entries:
  - category: Console
    entries:
      - key: print
        node: print()
        abstract: 'Outputs infromation to the console.'
        examples:
          - ex: "print('Hello!')"
            desc: Adds a line to the console that says 'Hello!'. The console will start a new line after each print.
          - ex: "print(10, 'is the number ten')"
            desc: When given multiple values, print will output all of them with a space between each one.
      - key: input
        node: input()
        abstract: Waits for text to be entered into the console.
        examples:
          - ex: "input('Are you sure? ')"
            desc: 'Optionally pass in a prompt. The prompt text will be output to the console before waiting for the user to enter something.'
          - ex: "name = input('Name: ')"
            desc: 'The input function returns the text that the user entered. This example stores what the user typed in in a variable called "name".'

  - category: Text
    entries:
      - key: string
        node: '""'
        title: string
        abstract: Some text - a sequence of letters or other characters.
        examples:
          - ex: "'Howdy partner!'"
            desc: An example string, including capital letters, spaces and punctuation.
          - ex: "'23' + '4'"
            desc: A string can contain digits, but is always treated as text. This joins two strings together as a new string "234".
          - ex: "'He said, \"That\\'s cool!\"'"
            desc: It's ok to include quotes in strings without escaping them.
      - key: str
        scopeEntry: str
        examples:
          - ex: str(20)
            desc: Returns '20' as a string (text) instead of a number.
          - ex: str([1, 2])
            desc: Returns '[1, 2]' - a string representation of the list.
      - key: concat
        title: 'join strings'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '+'
        abstract: 'A plus can be used to join strings together.'
        examples:
          - ex: "'Hello, ' + name"
            desc: 'The two strings are joined together into one new string.'
      - key: len
        scopeEntry: len
        examples:
          - ex: len('Hello')
            desc: Returns 5 because this string has 5 letters.
      - key: subscript
        serializedNode:
          type: PYTHON_SUBSCRIPT
          childSets:
            key:
              - type: 'PYTHON_EXPRESSION'
        abstract: 'Get a single character from the string by index (position in the string).'
        examples:
          - ex: "'Hello'[0]"
            desc: Get the first letter of the string ('H' in this case).
          - ex: "'Somebody'[1]"
            desc: Get the second letter of the string ('o' in this case), the numbering starts at 0.
          - ex: "'Hello'[-2]"
            desc: "Get the second last letter of the string: 'l'"

      - category: Capitalization
        entries:
        - key: lower
          scopeTypeAttr:
            type: 'str'
            attr: 'lower'
        - key: upper
          scopeTypeAttr:
            type: 'str'
            attr: 'upper'
        - key: title
          scopeTypeAttr:
            type: 'str'
            attr: 'title'
        - key: capitalize
          scopeTypeAttr:
            type: 'str'
            attr: 'capitalize'
        - key: islower
          scopeTypeAttr:
            type: 'str'
            attr: 'islower'
        - key: istitle
          scopeTypeAttr:
            type: 'str'
            attr: 'istitle'
        - key: isupper
          scopeTypeAttr:
            type: 'str'
            attr: 'isupper'
        - key: casefold
          scopeTypeAttr:
            type: 'str'
            attr: 'casefold'
        - key: swapcase
          scopeTypeAttr:
            type: 'str'
            attr: 'swapcase'

      - category: Characters
        entries:
        - key: 'isalnum'
          scopeTypeAttr:
            type: 'str'
            attr: 'isalnum'
        - key: 'isascii'
          scopeTypeAttr:
            type: 'str'
            attr: 'isascii'
        - key: 'isdecimal'
          scopeTypeAttr:
            type: 'str'
            attr: 'isdecimal'
        - key: 'isdigit'
          scopeTypeAttr:
            type: 'str'
            attr: 'isdigit'
        - key: 'isidentifier'
          scopeTypeAttr:
            type: 'str'
            attr: 'isidentifier'
        - key: 'isnumeric'
          scopeTypeAttr:
            type: 'str'
            attr: 'isnumeric'
        - key: 'isprintable'
          scopeTypeAttr:
            type: 'str'
            attr: 'isprintable'
        - key: 'isspace'
          scopeTypeAttr:
            type: 'str'
            attr: 'isspace'

      - category: Contents
        entries:
        - key: 'in'
          serializedNode:
            type: PYTHON_BINARY_OPERATOR
            properties:
              operator: 'in'
          abstract: 'True if a sequence of characters exists within the string'
          examples:
            - ex: '"lo" in "hello"'
              desc: This returns True because you can find the letters "lo" somewhere inside "hello"
            - ex: |
                  if 'e' in name:
                    print('Your name contains an e!')
              desc: If the name variable contains a string with an e in it, then the program will print a message.
            - ex: '"paper plane" in "paper"'
              desc: Even though "paper" is inside "paper plan" this example returns False. The string on the right hand side must completely contain the string on the left.
        - key: 'notin'
          serializedNode:
            type: PYTHON_BINARY_OPERATOR
            properties:
              operator: 'not in'
          examples:
            - ex: '"lo" not in "hello"'
              desc: This returns False because you can find the letters "lo" somewhere inside "hello"
            - ex: |
                  if 'e' not in name:
                    print('Your name does not contain an e!')
              desc: If the name variable contains a string with no e's anywhere inside it, then the program will print a message.
          abstract: 'True if a sequence of characters does not appear within the string'
        - key: 'startswith'
          scopeTypeAttr:
            type: 'str'
            attr: 'startswith'
          examples:
            - ex: "if answer.startswith('y'): print('You chose: yes')"
              desc: If the answer string is a string that starts with the letter 'y', print a message.
        - key: 'endswith'
          scopeTypeAttr:
            type: 'str'
            attr: 'endswith'
          examples:
            - ex: "if message.endswith('?'): print('That looks like a question!')"
              desc: "If the message string ends with a question mark characters '?', print a message."
        - key: 'index'
          scopeTypeAttr:
            type: 'str'
            attr: 'index'
          examples:
            - ex: "'hello everyone'.index('o')"
              desc: Returns 4, which the index number for the first occurrance of the letter 'o'.
            - ex: "'hello everyone'.index('ev')"
              desc: Returns 6, which is the index number for the first occurrance of the string 'ev'.
            - ex: "'hello'.index('z')"
              desc: Raises an error (ValueError) if the substring cannot be found.
        - key: 'count'
          scopeTypeAttr:
            type: 'str'
            attr: 'count'
          examples:
            - ex: "'hello all'.count('l')"
              desc: Returns 4, which how many times the letter 'l' appears in the string.
        - key: 'find'
          scopeTypeAttr:
            type: 'str'
            attr: 'find'
          examples:
            - ex: "'cat on a mat'.find('on')"
              desc: Returns 4, the index of the first occurance of the given substring, starting from the left.
            - ex: "'cat on a mat'.find('z')"
              desc: Returns -1 if the substring cannot be found.
        - key: 'rfind'
          scopeTypeAttr:
            type: 'str'
            attr: 'rfind'
          examples:
            - ex: "'cat on a mat'.rfind('a')"
              desc: Returns 10, the index of the last occurance of the given substring (starts looking from the right hand end of the string).
            - ex: "'cat on a mat'.rfind('z')"
              desc: Returns -1 if the substring cannot be found.
        - key: 'rindex'
          scopeTypeAttr:
            type: 'str'
            attr: 'rindex'
          examples:
            - ex: "'hello everyone'.rindex('o')"
              desc: Returns 11, which the index number for the last occurrance of the letter 'o' (starts looking from the right hand end of the string).

      - category: 'Edits'
        entries:
        - key: 'center'
          scopeTypeAttr:
            type: 'str'
            attr: 'center'
        - key: 'expandtabs'
          scopeTypeAttr:
            type: 'str'
            attr: 'expandtabs'
        - key: 'ljust'
          scopeTypeAttr:
            type: 'str'
            attr: 'ljust'
        - key: 'lstrip'
          scopeTypeAttr:
            type: 'str'
            attr: 'lstrip'
        - key: 'replace'
          scopeTypeAttr:
            type: 'str'
            attr: 'replace'
        - key: 'removeprefix'
          scopeTypeAttr:
            type: 'str'
            attr: 'removeprefix'
        - key: 'removesuffix'
          scopeTypeAttr:
            type: 'str'
            attr: 'removesuffix'
        - key: 'rjust'
          scopeTypeAttr:
            type: 'str'
            attr: 'rjust'
        - key: 'rstrip'
          scopeTypeAttr:
            type: 'str'
            attr: 'rstrip'
        - key: 'strip'
          scopeTypeAttr:
            type: 'str'
            attr: 'strip'
        - key: 'zfill'
          scopeTypeAttr:
            type: 'str'
            attr: 'zfill'

      - category: 'Split & Join'
        entries:
        - key: 'join'
          scopeTypeAttr:
            type: 'str'
            attr: 'join'
        - key: 'split'
          scopeTypeAttr:
            type: 'str'
            attr: 'split'
        - key: 'splitlines'
          scopeTypeAttr:
            type: 'str'
            attr: 'splitlines'
        - key: 'partition'
          scopeTypeAttr:
            type: 'str'
            attr: 'partition'
        - key: 'rpartition'
          scopeTypeAttr:
            type: 'str'
            attr: 'rpartition'
        - key: 'rsplit'
          scopeTypeAttr:
            type: 'str'
            attr: 'rsplit'

  - category: Numbers
    entries:
      - key: int literal
        node: '123'
        title: 'Integer'
        abstract: 'An integer, a whole number.'
      - key: int
        node: int()
        abstract: 'Creates a new integer by converting another value into an integer.'
        examples:
          - ex: 'int("56")'
            desc: Convert a string into an integer. Will cause an error if the string is not a valid number.
          - ex: 'int(4.9)'
            desc: When converting a float to an int, the number is always rounded down.
          - ex: "int('0111', 2)"
            desc: Optionally also accepts a base value for how the number should be interpreted. E.g. 2 for binary numbers.
      - key: float literal
        node: '1.5'
        title: Float
        abstract: 'A floating-point number, which is a decimal number.'
      - key: float
        node: float()
        abstract: 'Creates a new integer by converting another value into an integer.'
        examples:
          - ex: float('2.6')
            desc: Create a float from a string. Will cause an error if the string is not a valid number.
          - ex: float(5)
            desc: Create a float from an integer.
      - key: add
        title: Add
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '+'
        abstract: 'Adds numbers together, can also be used with other types (e.g. to join strings).'
        examples:
          - ex: '10 + 3 * 3'
            desc: 'Normal order of operations from mathematics applies, the multiplication will be calculated before the addition.'
          - ex: '++3'
            desc: 'It is valid Python to add plus signs before a number but this has no effect.'
      - key: minus
        title: Subtract
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '-'
        examples:
          - ex: '10 - 4'
            minus: The result of 100 minus 4 is 6.
        abstract: 'Subtracts the second value from the first. Can also make a single number negative.'
        examples:
          - ex: '10 - 5 - 2'
            desc: Subtracts 5 and 2 from 10, the result is 3.
          - ex: '-5'
            desc: A single minus sign will change a positive number negative. This is the same as multiplying by -1.
          - ex: '--6'
            desc: A minus sign will make a negative number postive, so two minus signs together have no effect.
      - key: multiply
        title: Multiply
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '*'
        abstract: 'Multiplies numbers together.'
        examples:
          - ex: 6 * 4
            desc: 6 times 4 is 24
          - ex: '10 + 3 * 3'
            desc: 'Normal order of operations from mathematics applies, the multiplication will be calculated before the addition.'

      - key: divide
        title: Divide
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '/'
        abstract: 'Divides the first number by the second number.'
        examples:
          - ex: 5/2
            desc: 5 divided by 2 is 2.5. The result is a float, even when both numbers are integers.
      - key: floordivide
        title: Floor Divide
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '//'
        abstract: Like division but will round down the result to the next whole number.
        examples:
          - ex: 5//2
            desc: 5 divided by 2 is 2.5 but with floor division, the result is rounded down to 2.
          - ex: 99 / 100
            desc: The result is always rounded down. With normal division this would be 0.99 but the result of the floor division is 0.
          - ex: 5.1 // 2
            desc: When used with float numbers the result will be a float too, but still rounded down to a whole number.
      - key: mod
        title: Modulo
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '%'
        abstract: 'The remainder when the number on the left is divided by the number on the right.'
        examples:
          - ex: '5 % 3'
            desc: 'When 5 is divided by 3 the remainder is 2.'
          - ex: '10 % 2 == 0'
            desc: 'Like all even numbers, 10 divided by 2 has a remainder of 0. This is a useful way to check if a number is odd or even.'

  - category: Logic
    entries:
      - key: 'true'
        node: 'True'
        abstract: 'The boolean (bool) value that indicates something is true.'
      - key: 'false'
        node: 'False'
        abstract: 'The boolean (bool) value for the opposite of True.'
      - key: 'bool'
        node: 'bool()'
        abstract: Create a boolean (True or False) out of another value.
        examples:
          - ex: "bool('')"
            desc: An empty string is considered False.
          - ex: bool('hi')
            desc: A string with any characters in it is considered to be True.
          - ex: bool(0)
            desc: The number 0 is considered False.
          - ex: bool(-32)
            desc: Any non-zero number is considered True.
      - key: 'and'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: 'and'
        abstract: ''
      - key: 'or'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: 'or'
        abstract: ''
      - key: 'not'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: 'not'
        abstract: ''
      - key: 'equals'
        title: 'is equal to'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '=='
        abstract: ''
      - key: 'inequals'
        title: 'is not equal to'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '!='
        abstract: ''
      - key: 'lt'
        title: 'less than'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '<'
        abstract: ''
      - key: 'lte'
        title: 'less or equal to'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '<='
        abstract: ''
      - key: 'gt'
        title: 'greater than'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '>'
        abstract: ''
      - key: 'gte'
        title: 'greater or equal to'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: '>='
        abstract: ''
      - key: 'is'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: 'is'
        abstract: 'True if the two sides refer to the same underlying object. Do not use with strings and numbers.'
        examples:
          - ex: var is None
            desc: Can be used to check if a variable is None.
      - key: 'is not'
        serializedNode:
          type: PYTHON_BINARY_OPERATOR
          properties:
            operator: 'is not'
        abstract: 'True if the two sides do not refer to the same underlying object. Do not use with strings and numbers.'
        examples:
          - ex: var is not None
            desc: Can be used to check if a variable is not None.
  - category: If-else
    entries:
      - key: 'if'
        serialize dNode:
          type: PYTHON_IF_STATEMENT
          childSets:
            condition:
              - type: 'PYTHON_EXPRESSION'
        abstract: 'Only execute some lines of code if a condition is met.'
        examples:
        - ex: |
            if score > 5:
              print("That's a good score!")
          desc: In this example, the program will only run the contained lines of code if the score was greater than 5. Otherwise it will skip everything inside the if.
      - key: elif
        serializedNode:
          type: PYTHON_ELIF_STATEMENT
          childSets:
            condition:
              - type: 'PYTHON_EXPRESSION'
        abstract: ''
      - key: else
        serializedNode:
          type: PYTHON_ELSE_STATEMENT
        abstract: ''
  - category: Loops
    entries:
      - key: for
        serializedNode:
          type: PYTHON_FOR_LOOP
          childSets:
            iterable:
              - type: 'PYTHON_EXPRESSION'
        abstract: ''
      - key: while
        serializedNode:
          type: PYTHON_WHILE_LOOP
          childSets:
            condition:
              - type: 'PYTHON_EXPRESSION'
        abstract: ''
      - key: break
        serializedNode:
          type: PY_BREAK
        abstract: ''
      - key: continue
        serializedNode:
          type: PY_CONTINUE
        abstract: ''

  - category: Lists
    entries:
      - key: listlit
        node: '[]'
        abstract: ''
      - key: list
        node: 'list()'
        abstract: ''
      - key: subscript
        serializedNode:
          type: PYTHON_SUBSCRIPT
          childSets:
            key:
              - type: 'PYTHON_EXPRESSION'
        abstract: ''
      - key: len
        scopeEntry: len

  - category: Dictionaries
    entries:
      - key: dictlit
        node: '{}'
        abstract: ''
      - key: dict
        node: 'dict()'
        abstract: ''
      - key: subscript
        serializedNode:
          type: PYTHON_SUBSCRIPT
          childSets:
            key:
              - type: 'PYTHON_EXPRESSION'
        abstract: ''
      - key: len
        scopeEntry: len


  - category: Sets
    entries:
      - key: set
        node: 'set()'
        abstract: ''
      - key: subscript
        serializedNode:
          type: PYTHON_SUBSCRIPT
          childSets:
            key:
              - type: 'PYTHON_EXPRESSION'
        abstract: ''
      - key: len
        scopeEntry: len

  - category: Functions
    entries:
      - key: def
        serializedNode:
          type: PYTHON_FUNCTION_DECLARATION
        abstract: ''
  
  - category: Libraries
    entries:
      - key: import
        serializedNode:
          type: PYTHON_IMPORT
        abstract: ''
      - key: importfrom
        serializedNode:
          type: PYTHON_FROM_IMPORT
        abstract: ''

  - category: Misc
    entries:
      - key: none
        node: None
        abstract: 'A special value to represent that there is no value or nothing.'
        examples:
          - ex: selection = None
            desc: None can be used to indicate that the variable has not been filled with a value.