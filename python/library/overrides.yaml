
overrides:
  - key: builtins.print
    abstract: 'Outputs information to the console.'
    parameters:
      - name: values
        kind: 'VAR_POSITIONAL'
      - name: sep
        kind: 'KEYWORD_ONLY'
      - name: end
        kind: 'KEYWORD_ONLY'
        default: '\n'
      - name: file
        kind: 'KEYWORD_ONLY'
        default: 'sys.stdout'
      - name: flush
        kind: 'KEYWORD_ONLY'
        default: 'False'
    examples:
      - ex: "print('Hello!')"
        desc: Adds a line to the console that says 'Hello!'. The console will start a new line after each print.
      - ex: "print(10, 'is the number ten')"
        desc: When given multiple values, print will output all of them with a space between each one.

  - key: builtins.input
    abstract: 'Waits for text to be entered into the console.'
    examples:
      - ex: "input('Are you sure? ')"
        desc: 'Optionally pass in a prompt. The prompt text will be output to the console before waiting for the user to enter something.'
      - ex: "name = input('Name: ')"
        desc: 'The input function returns the text that the user entered. This example stores what the user typed in in a variable called "name".'

  - key: builtins.str
    abstract: 'Convert something into a string (text).'
    examples:
      - ex: str(20)
        desc: Returns '20' as a string (text) instead of a number.
      - ex: str([1, 2])
        desc: Returns '[1, 2]' - a string representation of the list.

  - key: builtins.str.startswith
    examples:
      - ex: "if answer.startswith('y'): print('You chose: yes')"
        desc: If the answer string is a string that starts with the letter 'y', print a message.
    parameters:
      - name: 'prefix'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.endswith
    examples:
      - ex: "if message.endswith('?'): print('That looks like a question!')"
        desc: "If the message string ends with a question mark characters '?', print a message."
    parameters:
      - name: 'suffix'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.index
    examples:
      - ex: "'hello everyone'.index('o')"
        desc: Returns 4, which the index number for the first occurrance of the letter 'o'.
      - ex: "'hello everyone'.index('ev')"
        desc: Returns 6, which is the index number for the first occurrance of the string 'ev'.
      - ex: "'hello'.index('z')"
        desc: Raises an error (ValueError) if the substring cannot be found.
    parameters:
      - name: 'substring'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.count
    examples:
      - ex: "'hello all'.count('l')"
        desc: Returns 4, which how many times the letter 'l' appears in the string.
    parameters:
      - name: 'substring'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.find
    examples:
      - ex: "'cat on a mat'.find('on')"
        desc: Returns 4, the index of the first occurance of the given substring, starting from the left.
      - ex: "'cat on a mat'.find('z')"
        desc: Returns -1 if the substring cannot be found.
    parameters:
      - name: 'substring'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.rfind
    examples:
      - ex: "'cat on a mat'.rfind('a')"
        desc: Returns 10, the index of the last occurance of the given substring (starts looking from the right hand end of the string).
      - ex: "'cat on a mat'.rfind('z')"
        desc: Returns -1 if the substring cannot be found.
    parameters:
      - name: 'substring'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.rindex
    examples:
      - ex: "'hello everyone'.rindex('o')"
        desc: Returns 11, which the index number for the last occurrance of the letter 'o' (starts looking from the right hand end of the string).
    parameters:
      - name: 'substring'
        kind: 'POSITIONAL_ONLY'
      - name: 'start'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: 'None'

  - key: builtins.str.split
    examples:
      - ex: "'a cat  on  a mat'.split()"
        desc: Returns a list of 5 words. When no separator is given, the string is split where there are spaces.
      - ex: "'one,two,three'.split(',')"
        desc: Returns a list of three words, broken up wherever there is a comma.

  - key: builtins.str.join
    examples:
      - ex: "','.join(['one', 'two', 'three'])"
        desc: Returns a new string with each of the three words joined together with commas.
      - ex: "' '.join(['the', 'cat', 'sat'])"
        desc: Returns a string with a space between each word.

  - key: builtins.int
    abstract: 'Create a new integer by converting another value into an integer.'
    examples:
      - ex: 'int("56")'
        desc: Convert a string into an integer. Will cause an error if the string is not a valid number.
      - ex: 'int(4.9)'
        desc: When converting a float to an int, the number is always rounded down.
      - ex: "int('0111', 2)"
        desc: Optionally also accepts a base value for how the number should be interpreted. E.g. 2 for binary numbers.

  - key: builtins.float
    node: float()
    abstract: 'Creates a new integer by converting another value into an integer.'
    examples:
      - ex: float('2.6')
        desc: Create a float from a string. Will cause an error if the string is not a valid number.
      - ex: float(5)
        desc: Create a float from an integer.

  - key: builtins.bool
    node: 'bool()'
    abstract: Create a boolean (True or False) out of another value.
    examples:
      - ex: "bool('')"
        desc: An empty string is considered False.
      - ex: bool('hi')
        desc: A string with any characters in it is considered to be True.
      - ex: bool(0)
        desc: The number 0 is considered False.
      - ex: bool(-32)
        desc: Any non-zero number is considered True.

  - key: builtins.enumerate
    abstract: 'Iterator over pairs of the count and the items from the iterable.'
    parameters:
      - name: iterable
        kind: 'POSITIONAL_ONLY'
      - name: start
        kind: 'POSITIONAL_ONLY'
        default: '0'
    examples:
      - ex: |
            for i, letter in enumerate('Hello'):
              print(i, letter)
        desc: "Prints a number (starting at 0) the letter for each letter in 'hello'."
      - ex: |
            names = ['Alice', 'Bob', 'Charlie']
            for index, name in enumerate(names):
              print(index, name)
        desc: 'Prints each name in the list, along with the index 0, 1, 2 for each name.'

  - key: builtins.len
    abstract: 'Returns the number of items in a container or characters in a string'
    examples:
      - ex: len('Hello')
        desc: Returns 5 because this string has 5 letters.

  - key: builtins.range
    abstract: 'Creates a sequence of numbers from a starting number up to, but not including, the end number.'
    parameters:
      - name: 'end/start'
        kind: 'POSITIONAL_ONLY'
      - name: 'end'
        kind: 'POSITIONAL_ONLY'
        default: None
      - name: 'step'
        kind: 'POSITIONAL_ONLY'
        default: '1'
    examples:
      - ex: |
            for num in range(10):
              print(num)
        desc: 'Prints numbers 0 to 9, with one on each line.'
      - ex: |
            for num in range(5, 10):
              print(num)
        desc: 'Prints numbers 5 to 9, with one on each line.'


  - key: builtins.dict.clear
    parameters: []

  - key: builtins.dict.copy
    parameters: []

  - key: builtins.dict.items
    parameters: []

  - key: builtins.dict.keys
    parameters: []

  - key: builtins.dict.pop
    parameters:
      - name: 'key'
        kind: 'POSITIONAL_ONLY'
      - name: 'default'
        kind: 'POSITIONAL_ONLY'
        default: 'None'
    abstract: 'Remove specified key and return the corresponding value.'

  - key: builtins.dict.update
    parameters:
      - name: 'entries'
        kind: 'POSITIONAL_ONLY'
      - name: 'keywords'
        kind: 'VAR_KEYWORD'

  - key: builtins.dict.values
    parameters: []

  - key: builtins.set.add
    parameters:
      - name: 'item'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.clear
    parameters: []

  - key: builtins.set.copy
    parameters: []

  - key: builtins.set.difference
    parameters:
      - name: 'iterables'
        kind: 'VAR_POSITIONAL'

  - key: builtins.set.difference_update
    parameters:
      - name: 'iterables'
        kind: 'VAR_POSITIONAL'

  - key: builtins.set.discard
    parameters:
      - name: 'item'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.intersection
    parameters:
      - name: 'iterables'
        kind: 'VAR_POSITIONAL'

  - key: builtins.set.intersection_update
    parameters:
      - name: 'iterables'
        kind: 'VAR_POSITIONAL'

  - key: builtins.set.isdisjoint
    parameters:
      - name: 'iterable'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.issubset
    parameters:
      - name: 'iterable'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.issuperset
    parameters:
      - name: 'iterable'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.pop
    parameters: []

  - key: builtins.set.remove
    parameters:
      - name: 'item'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.symmetric_difference
    parameters:
      - name: 'iterable'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.symmetric_difference_update
    parameters:
      - name: 'iterable'
        kind: 'POSITIONAL_ONLY'

  - key: builtins.set.union
    parameters:
      - name: 'iterables'
        kind: 'VAR_POSITIONAL'

  - key: builtins.set.update
    parameters:
      - name: 'iterables'
        kind: 'VAR_POSITIONAL'