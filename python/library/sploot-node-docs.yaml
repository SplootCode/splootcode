
nodes:
  - key: string
    node: '""'
    title: string
    abstract: Some text - a sequence of letters or other characters.
    examples:
      - ex: "'Howdy partner!'"
        desc: An example string, including capital letters, spaces and punctuation.
      - ex: "'23' + '4'"
        desc: A string can contain digits, but is always treated as text. This joins two strings together as a new string "234".
      - ex: "'He said, \"That\\'s cool!\"'"
        desc: It's ok to include quotes in strings without escaping them.

  - key: string-add
    title: 'join strings'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '+'
    abstract: 'A plus can be used to join strings together.'
    examples:
      - ex: "'Hello, ' + name"
        desc: 'The two strings are joined together into one new string.'

  - key: string-subscript
    serializedNode:
      type: PYTHON_SUBSCRIPT
      childSets:
        key:
          - type: 'PYTHON_EXPRESSION'
    abstract: 'Get a single character from the string by index (position in the string).'
    examples:
      - ex: "'Hello'[0]"
        desc: Get the first letter of the string ('H' in this case).
      - ex: "'Somebody'[1]"
        desc: Get the second letter of the string ('o' in this case), the numbering starts at 0.
      - ex: "'Hello'[-2]"
        desc: "Get the second last letter of the string: 'l'"

  - key: binaryop-in
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'in'
    abstract: 'True if a sequence of characters exists within the string'
    examples:
      - ex: '"lo" in "hello"'
        desc: This returns True because you can find the letters "lo" somewhere inside "hello"
      - ex: |
            if 'e' in name:
              print('Your name contains an e!')
        desc: If the name variable contains a string with an e in it, then the program will print a message.
      - ex: '"paper plane" in "paper"'
        desc: Even though "paper" is inside "paper plan" this example returns False. The string on the right hand side must completely contain the string on the left.

  - key: 'binaryop-notin'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'not in'
    examples:
      - ex: '"lo" not in "hello"'
        desc: This returns False because you can find the letters "lo" somewhere inside "hello"
      - ex: |
            if 'e' not in name:
              print('Your name does not contain an e!')
        desc: If the name variable contains a string with no e's anywhere inside it, then the program will print a message.
    abstract: 'True if a sequence of characters does not appear within the string'

  - key: int
    node: '123'
    title: 'Integer'
    abstract: 'An integer, a whole number.'

  - key: float
    node: '1.5'
    title: Float
    abstract: 'A floating-point number, also called a decimal number.'

  - key: binaryop-add
    title: Add
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '+'
    abstract: 'Adds numbers together, can also be used with other types (e.g. to join strings).'
    examples:
      - ex: '10 + 3 * 3'
        desc: 'Normal order of operations from mathematics applies, the multiplication will be calculated before the addition.'
      - ex: '++3'
        desc: 'It is valid Python to add plus signs before a number but this has no effect.'

  - key: binaryop-minus
    title: Subtract
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '-'
    examples:
      - ex: '10 - 4'
        minus: The result of 100 minus 4 is 6.
    abstract: 'Subtracts the second value from the first. Can also make a single number negative.'
    examples:
      - ex: '10 - 5 - 2'
        desc: Subtracts 5 and 2 from 10, the result is 3.
      - ex: '-5'
        desc: A single minus sign will change a positive number negative. This is the same as multiplying by -1.
      - ex: '--6'
        desc: A minus sign will make a negative number postive, so two minus signs together have no effect.

  - key: binaryop-multiply
    title: Multiply
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '*'
    abstract: 'Multiplies numbers together.'
    examples:
      - ex: 6 * 4
        desc: 6 times 4 is 24
      - ex: '10 + 3 * 3'
        desc: 'Normal order of operations from mathematics applies, the multiplication will be calculated before the addition.'

  - key: binaryop-divide
    title: Divide
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '/'
    abstract: 'Divides the first number by the second number.'
    examples:
      - ex: 5/2
        desc: 5 divided by 2 is 2.5. The result is a float, even when both numbers are integers.

  - key: binaryop-floordivide
    title: Floor Divide
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '//'
    abstract: Like division but will round down the result to the next whole number.
    examples:
      - ex: 5//2
        desc: 5 divided by 2 is 2.5 but with floor division, the result is rounded down to 2.
      - ex: 99 / 100
        desc: The result is always rounded down. With normal division this would be 0.99 but the result of the floor division is 0.
      - ex: 5.1 // 2
        desc: When used with float numbers the result will be a float too, but still rounded down to a whole number.

  - key: binaryop-mod
    title: Modulo
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '%'
    abstract: 'The remainder when the number on the left is divided by the number on the right.'
    examples:
      - ex: '5 % 3'
        desc: 'When 5 is divided by 3 the remainder is 2.'
      - ex: '10 % 2 == 0'
        desc: 'Like all even numbers, 10 divided by 2 has a remainder of 0. This is a useful way to check if a number is odd or even.'

  - key: literal-true
    node: 'True'
    abstract: 'The boolean (bool) value that indicates something is true.'

  - key: literal-false
    node: 'False'
    abstract: 'The boolean (bool) value for the opposite of True.'

  - key: binaryop-and
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'and'
    abstract: ''

  - key: 'binaryop-or'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'or'
    abstract: ''

  - key: 'binaryop-not'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'not'
    abstract: ''

  - key: 'binaryop-equals'
    title: 'is equal to'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '=='
    abstract: ''

  - key: 'binaryop-inequals'
    title: 'is not equal to'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '!='
    abstract: ''

  - key: 'binaryop-lt'
    title: 'less than'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '<'
    abstract: ''

  - key: 'binaryop-lte'
    title: 'less or equal to'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '<='
    abstract: ''

  - key: 'binaryop-gt'
    title: 'greater than'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '>'
    abstract: ''

  - key: 'binaryop-gte'
    title: 'greater or equal to'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: '>='
    abstract: ''

  - key: 'binaryop-is'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'is'
    abstract: 'True if the two sides refer to the same underlying object. Do not use with strings and numbers.'
    examples:
      - ex: var is None
        desc: Can be used to check if a variable is None.

  - key: 'binaryop-isnot'
    serializedNode:
      type: PYTHON_BINARY_OPERATOR
      properties:
        operator: 'is not'
    abstract: 'True if the two sides do not refer to the same underlying object. Do not use with strings and numbers.'
    examples:
      - ex: var is not None
        desc: Can be used to check if a variable is not None.

  - key: 'if'
    serializedNode:
      type: PYTHON_IF_STATEMENT
      childSets:
        condition:
          - type: 'PYTHON_EXPRESSION'
    abstract: 'Only execute some lines of code if a condition is met.'
    examples:
    - ex: |
        if score > 5:
          print("That's a good score!")
      desc: In this example, the program will only run the contained lines of code if the score was greater than 5. Otherwise it will skip everything inside the if.

  - key: elif
    serializedNode:
      type: PYTHON_ELIF_STATEMENT
      childSets:
        condition:
          - type: 'PYTHON_EXPRESSION'
    abstract: ''
    examples: []

  - key: else
    serializedNode:
      type: PYTHON_ELSE_STATEMENT
    abstract: ''
    examples: []

  - key: for
    serializedNode:
      type: PYTHON_FOR_LOOP
      childSets:
        iterable:
          - type: 'PYTHON_EXPRESSION'
    abstract: ''
    examples: []

  - key: while
    serializedNode:
      type: PYTHON_WHILE_LOOP
      childSets:
        condition:
          - type: 'PYTHON_EXPRESSION'
    abstract: ''
    examples: []

  - key: break
    serializedNode:
      type: PY_BREAK
    abstract: ''
    examples: []

  - key: continue
    serializedNode:
      type: PY_CONTINUE
    abstract: ''
    examples: []

  - key: list
    node: '[]'
    abstract: ''
    examples: []

  - key: list-subscript
    serializedNode:
      type: PYTHON_SUBSCRIPT
      childSets:
        key:
          - type: 'PYTHON_EXPRESSION'
    abstract: ''
    examples: []

  - key: dict
    node: '{}'
    abstract: ''

  - key: dict-subscript
    serializedNode:
      type: PYTHON_SUBSCRIPT
      childSets:
        key:
          - type: 'PYTHON_EXPRESSION'

  - key: function
    serializedNode:
      type: PYTHON_FUNCTION_DECLARATION
    abstract: ''

  - key: return
    serializedNode:
      type: PYTHON_RETURN
    abstract: ''

  - key: import
    serializedNode:
      type: PYTHON_IMPORT
    abstract: ''

  - key: import-from
    serializedNode:
      type: PYTHON_FROM_IMPORT
    abstract: ''

  - key: none
    node: None
    abstract: 'A special value to represent that there is no value or nothing.'
    examples:
      - ex: selection = None
        desc: None can be used to indicate that the variable has not been filled with a value.