{
  "category": "asyncio",
  "entries": [
    {
      "key": "asyncio.BaseEventLoop",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "BaseEventLoop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Server",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Server"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.coroutine",
      "abstract": "Decorator to mark coroutines.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "coroutine"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.iscoroutinefunction",
      "abstract": "Return True if func is a decorated coroutine function.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "iscoroutinefunction"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.iscoroutine",
      "abstract": "Return True if obj is a coroutine object.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "iscoroutine"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.AbstractEventLoopPolicy",
      "abstract": "Abstract policy for accessing the event loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "AbstractEventLoopPolicy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.AbstractEventLoop",
      "abstract": "Abstract event loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "AbstractEventLoop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.AbstractServer",
      "abstract": "Abstract server returned by create_server().",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "AbstractServer"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Handle",
      "abstract": "Object returned by callback registration methods.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Handle"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.TimerHandle",
      "abstract": "Object returned by timed callback registration methods.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "TimerHandle"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.get_event_loop_policy",
      "abstract": "Get the current event loop policy.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "get_event_loop_policy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.set_event_loop_policy",
      "abstract": "Set the current event loop policy.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "set_event_loop_policy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.get_event_loop",
      "abstract": "Return an asyncio event loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "get_event_loop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.set_event_loop",
      "abstract": "Equivalent to calling get_event_loop_policy().set_event_loop(loop).",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "set_event_loop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.new_event_loop",
      "abstract": "Equivalent to calling get_event_loop_policy().new_event_loop().",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "new_event_loop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.get_child_watcher",
      "abstract": "Equivalent to calling get_event_loop_policy().get_child_watcher().",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "get_child_watcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.set_child_watcher",
      "abstract": "Equivalent to calling",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "set_child_watcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.get_running_loop",
      "abstract": "Return the running event loop.  Raise a RuntimeError if there is none.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "get_running_loop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Future",
      "abstract": "This class is *almost* compatible with concurrent.futures.Future.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Future"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.wrap_future",
      "abstract": "Wrap concurrent.futures.Future object.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "wrap_future"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.isfuture",
      "abstract": "Check for a Future.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "isfuture"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Lock",
      "abstract": "Primitive lock objects.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Lock"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Event",
      "abstract": "Asynchronous equivalent to threading.Event.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Event"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Condition",
      "abstract": "Asynchronous equivalent to threading.Condition.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Condition"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Semaphore",
      "abstract": "A Semaphore implementation.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Semaphore"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.BoundedSemaphore",
      "abstract": "A bounded semaphore implementation.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "BoundedSemaphore"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.BaseProtocol",
      "abstract": "Common base class for protocol interfaces.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "BaseProtocol"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Protocol",
      "abstract": "Interface for stream protocol.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Protocol"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.DatagramProtocol",
      "abstract": "Interface for datagram protocol.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "DatagramProtocol"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.SubprocessProtocol",
      "abstract": "Interface for protocol for subprocess calls.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "SubprocessProtocol"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.BufferedProtocol",
      "abstract": "Interface for stream protocol with manual buffer control.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "BufferedProtocol"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Queue",
      "abstract": "A queue, useful for coordinating producer and consumer coroutines.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Queue"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.PriorityQueue",
      "abstract": "A subclass of Queue; retrieves entries in priority order (lowest first).",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "PriorityQueue"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.LifoQueue",
      "abstract": "A subclass of Queue that retrieves most recently added entries first.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "LifoQueue"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.QueueFull",
      "abstract": "Raised when the Queue.put_nowait() method is called on a full Queue.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "QueueFull"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.QueueEmpty",
      "abstract": "Raised when Queue.get_nowait() is called on an empty Queue.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "QueueEmpty"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.StreamReader",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "StreamReader"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.StreamWriter",
      "abstract": "Wraps a Transport.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "StreamWriter"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.StreamReaderProtocol",
      "abstract": "Helper class to adapt between Protocol and StreamReader.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "StreamReaderProtocol"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.open_connection",
      "abstract": "A wrapper for create_connection() returning a (reader, writer) pair.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "open_connection"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.start_server",
      "abstract": "Start a socket server, call back for each client connected.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "start_server"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.open_unix_connection",
      "abstract": "Similar to `open_connection` but works with UNIX Domain Sockets.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "open_unix_connection"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.start_unix_server",
      "abstract": "Similar to `start_server` but works with UNIX Domain Sockets.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "start_unix_server"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.create_subprocess_exec",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "create_subprocess_exec"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.create_subprocess_shell",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "create_subprocess_shell"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Task",
      "abstract": "A coroutine wrapped in a Future.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Task"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.create_task",
      "abstract": "Schedule the execution of a coroutine object in a spawn task.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "create_task"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.FIRST_COMPLETED",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_MEMBER",
        "properties": {
          "member": "FIRST_COMPLETED"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.FIRST_EXCEPTION",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_MEMBER",
        "properties": {
          "member": "FIRST_EXCEPTION"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.ALL_COMPLETED",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_MEMBER",
        "properties": {
          "member": "ALL_COMPLETED"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.wait_for",
      "abstract": "Wait for the single Future or coroutine to complete, with timeout.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "wait_for"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.as_completed",
      "abstract": "Return an iterator whose values are coroutines.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "as_completed"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.sleep",
      "abstract": "Coroutine that completes after a given time (in seconds).",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "sleep"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.shield",
      "abstract": "Wait for a future, shielding it from cancellation.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "shield"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.run_coroutine_threadsafe",
      "abstract": "Submit a coroutine object to a given event loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "run_coroutine_threadsafe"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.current_task",
      "abstract": "Return a currently executed task.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "current_task"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.all_tasks",
      "abstract": "Return a set of all tasks for the loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "all_tasks"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.BaseTransport",
      "abstract": "Base class for transports.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "BaseTransport"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.ReadTransport",
      "abstract": "Interface for read-only transports.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "ReadTransport"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.WriteTransport",
      "abstract": "Interface for write-only transports.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "WriteTransport"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.Transport",
      "abstract": "Interface representing a bidirectional transport.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "Transport"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.DatagramTransport",
      "abstract": "Interface for datagram (UDP) transports.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "DatagramTransport"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.SubprocessTransport",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "SubprocessTransport"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.run",
      "abstract": "Execute the coroutine and return the result.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "run"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.CancelledError",
      "abstract": "The Future or Task was cancelled.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "CancelledError"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.InvalidStateError",
      "abstract": "The operation is not allowed in this state.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "InvalidStateError"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.TimeoutError",
      "abstract": "The operation exceeded the given deadline.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "TimeoutError"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.IncompleteReadError",
      "abstract": "    Incomplete read error. Attributes:",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "IncompleteReadError"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.LimitOverrunError",
      "abstract": "Reached the buffer limit while looking for a separator.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "LimitOverrunError"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.SendfileNotAvailableError",
      "abstract": "Sendfile syscall is not available.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "SendfileNotAvailableError"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.to_thread",
      "abstract": "Asynchronously run function *func* in a separate thread.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "to_thread"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.SelectorEventLoop",
      "abstract": "Windows version of selector event loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "SelectorEventLoop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.SelectorEventLoop",
      "abstract": "Unix event loop.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "SelectorEventLoop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.ProactorEventLoop",
      "abstract": "Windows version of proactor event loop using IOCP.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "ProactorEventLoop"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.IocpProactor",
      "abstract": "Proactor implementation using IOCP.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "IocpProactor"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.DefaultEventLoopPolicy",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "DefaultEventLoopPolicy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.DefaultEventLoopPolicy",
      "abstract": "UNIX event loop policy with a watcher for child processes.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "DefaultEventLoopPolicy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.WindowsSelectorEventLoopPolicy",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "WindowsSelectorEventLoopPolicy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.WindowsProactorEventLoopPolicy",
      "abstract": "",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "WindowsProactorEventLoopPolicy"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.AbstractChildWatcher",
      "abstract": "Abstract base class for monitoring child processes.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "AbstractChildWatcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.SafeChildWatcher",
      "abstract": "'Safe' child watcher implementation.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "SafeChildWatcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.FastChildWatcher",
      "abstract": "'Fast' child watcher implementation.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "FastChildWatcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.PidfdChildWatcher",
      "abstract": "Child watcher implementation using Linux's pid file descriptors.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "PidfdChildWatcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.MultiLoopChildWatcher",
      "abstract": "A watcher that doesn't require running loop in the main thread.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "MultiLoopChildWatcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    },
    {
      "key": "asyncio.ThreadedChildWatcher",
      "abstract": "Threaded child watcher implementation.",
      "serializedNode": {
        "type": "PYTHON_CALL_MEMBER",
        "properties": {
          "member": "ThreadedChildWatcher"
        },
        "childSets": {
          "object": [
            {
              "type": "PY_IDENTIFIER",
              "properties": {
                "identifier": "asyncio"
              },
              "childSets": {}
            }
          ],
          "arguments": [
            {
              "type": "PY_ARG",
              "childSets": {
                "argument": [
                  {
                    "type": "PYTHON_EXPRESSION",
                    "properties": {},
                    "childSets": {
                      "tokens": []
                    }
                  }
                ]
              },
              "properties": {}
            }
          ]
        }
      }
    }
  ]
}